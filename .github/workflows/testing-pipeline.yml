name: Multi-User Agent System Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  POSTGRES_VERSION: '13'

jobs:
  # Frontend Testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linting
      run: |
        cd frontend
        npm run lint

    - name: Run unit tests
      run: |
        cd frontend
        npm run test -- --coverage --watchAll=false --testResultsProcessor=jest-junit

    - name: Run integration tests
      run: |
        cd frontend
        npm run test:integration -- --watchAll=false

    - name: Run performance tests
      run: |
        cd frontend
        npm run test:performance -- --watchAll=false

    - name: Run accessibility tests
      run: |
        cd frontend
        npm run test:a11y -- --watchAll=false

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/test-results/
          frontend/coverage/
        retention-days: 7

  # Backend Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_meetings
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Setup test database
      run: |
        export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/test_meetings"
        python -c "
        from database import init_db, Base
        import asyncio
        async def setup():
            async with init_db() as engine:
                async with engine.begin() as conn:
                    await conn.run_sync(Base.metadata.create_all)
        asyncio.run(setup())
        "

    - name: Run unit tests
      run: |
        cd backend
        python -m pytest test_main.py -v -m unit --cov=. --cov-report=html --cov-report=term-missing

    - name: Run integration tests
      run: |
        cd backend
        python -m pytest test_main.py -v -m integration --tb=short

    - name: Run performance tests
      run: |
        cd backend
        python -m pytest test_main.py -v -m performance --tb=short

    - name: Run security tests
      run: |
        cd backend
        python -m pytest test_main.py -v -m security --tb=short

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/htmlcov
        flags: backend
        name: backend-coverage

  # End-to-End Testing
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Playwright
      run: |
        cd frontend
        npx playwright install --with-deps

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Setup Python backend
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start backend server
      run: |
        cd backend
        python main.py &
        sleep 10

    - name: Run E2E tests
      run: |
        cd frontend
        npx playwright test --project=chromium --grep "Complete Meeting Flow"

    - name: Run cross-browser tests
      run: |
        cd frontend
        npx playwright test --project=firefox,webkit

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          frontend/test-results/
          frontend/playwright-report/
        retention-days: 7

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        cd ../backend
        pip install -r requirements.txt

    - name: Run frontend performance tests
      run: |
        cd frontend
        npm run test:performance -- --watchAll=false --testNamePattern="performance|Performance"

    - name: Run load tests
      run: |
        cd frontend
        npx playwright test --grep "performance|Performance|Load"

    - name: Run memory leak tests
      run: |
        cd frontend
        npm run test -- --testNamePattern="memory|Memory" --watchAll=false

    - name: Generate performance report
      run: |
        echo "Performance test results generated"
        # Add performance report generation here

  # Security Testing
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        cd ../backend
        pip install -r requirements.txt

    - name: Run security tests
      run: |
        cd backend
        python -m pytest test_main.py -v -m security

    - name: Run dependency vulnerability check
      run: |
        cd frontend
        npm audit --audit-level=moderate

    - name: Run SAST (Static Application Security Testing)
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, python

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Build and Deploy (only on main branch)
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker images
      run: |
        docker-compose -f docker-compose.prod.yml build

    - name: Run final integration tests
      run: |
        docker-compose -f docker-compose.prod.yml up -d
        sleep 30
        # Add final integration tests here

    - name: Deploy to production
      if: success()
      run: |
        echo "Deploying to production..."
        # Add deployment commands here

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, e2e-tests, performance-tests, security-tests]
    if: always()

    steps:
    - name: Generate test summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY

        # Check job statuses and add to summary
        if [ "${{ needs.frontend-tests.result }}" == "success" ]; then
          echo "| Frontend Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Frontend Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.backend-tests.result }}" == "success" ]; then
          echo "| Backend Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Backend Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "| E2E Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| E2E Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.performance-tests.result }}" == "success" ]; then
          echo "| Performance Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Performance Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.security-tests.result }}" == "success" ]; then
          echo "| Security Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Security Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi